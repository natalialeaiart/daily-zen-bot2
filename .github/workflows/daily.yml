name: Post Daily Zen Quote and Song

on:
  schedule:
    - cron: '0 5 * * *' # 08:00 по Риге (GMT+3) = 05:00 UTC
  workflow_dispatch: # Позволяет запускать вручную из интерфейса GitHub Actions

jobs:
  run:
    runs-on: ubuntu-latest
    permissions: # <-- Этот блок ОБЯЗАТЕЛЕН
      contents: write # <-- Явно даем права на запись в репозиторий

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        # <-- УБРАНО: with: token: ${{ secrets.GITHUB_TOKEN }}
        # Теперь полагаемся только на permissions: contents: write выше

      # --- Шаг для отладки файла индекса после checkout ---
      - name: Debug index file after checkout
        run: |
          echo "--- Debug: Contents of current_song_index.txt after checkout ---"
          # Используем -f, чтобы не выводить ошибку, если файл не существует
          cat -f current_song_index.txt || echo "File does does not exist or is empty or cannot be read."
          echo "--- End Debug ---"
        # Помечаем этот шаг как продолжающийся при ошибке, чтобы не прерывать workflow из-за проблем с чтением файла
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Убедитесь, что это ваша версия Python

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run bot
        id: run_bot_step # Добавляем ID шагу Run bot для использования в if условии ниже
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: python main.py

      # --- Шаги для сохранения индекса песни ---
      # Эти шаги выполняются только если Run bot завершился успешно И мы в ветке main
      - name: Commit and push index file
        # Проверяем, что предыдущий шаг run_bot_step завершился успешно И мы находимся в основной ветке
        if: success() && steps.run_bot_step.outcome == 'success' && github.ref == 'refs/heads/main'
        run: |
          echo "--- Committing and pushing index file ---"
          git status # Показываем статус git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Добавляем файл forcefully, на случай если git add сработал странно в прошлый раз
          git add -f current_song_index.txt
          echo "Git add -f executed."
          # Проверяем, есть ли изменения, которые были добавлены в staging area
          # git diff --cached --quiet --exit-code сравнивает staging area с HEAD
          if git diff --cached --quiet --exit-code; then
            echo "No changes detected in staging area. Skipping commit."
          else
            echo "Changes detected in staging area. Committing..."
            git commit -m "Bot: Update song index"
            echo "Commit created. Pushing..."
            # Используем более явный синтаксис для push
            git push origin HEAD:${{ github.ref }}
            echo "Push completed."
          fi
          echo "--- End Commit and Push ---"
